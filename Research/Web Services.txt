Alexander Gould 
CSC4350 - Personal Calendar
Web Service Research

Weather API - OpenWeatherMap
	* https://openweathermap.org/
	* https://www.igorkromin.net/index.php/2017/01/01/a-simple-openweathermap-example-in-java/
	* https://bitbucket.org/aksinghnet/owm-japis - Library link
	We have to sign up in order to get an API key, but according to the documentation we'd be able to gather Daily, and Weekly weather.
	The provided data can also reference icons and other materials, allowing us to easily call for whatever information we need provided
	we have set up our application properly. Since each version of the application will also use the same API key, there's no need for
	users of the calendar to set up their own account with openweathermap.
	Our steps should be as follows: setup an account to get an API key, add the basic notation needed as provided in both the example class
	and the library link, and then run our application while calling the various functions and information we need to display.

Geolocation API - Google Maps/Geocoding API
	* https://stackoverflow.com/questions/19367922/how-use-java-with-google-maps-api
	* https://developers.google.com/maps/documentation/geocoding/start?hl=en
	* https://developers.google.com/maps/documentation/geocoding/start?hl=en
	As the main answer on the stackoverflow page puts it, the easiest way to get the services we need for the calendar is through Google Maps.
	Unfortunately, it gets complicated. There's no direct way to connect Google Maps to our Java application. We have to get another API key,
	then ping googleapis to get information about a requested address location. The returned data is given in either XAML or JSON, both of
	which would then have to be deciphered by our program. However, even this would only provide a latitude and longitude which we would then
	have to implement into a map of some sort. However, what we could do instead is use it to gather the latitude and longitude of both the
	place the user is going to and the place they're coming from in order to guesstimate a travel time.
	This implementation would also likely require us to use JavaFX, which is relatively easy to use as it's part of Java itself, but it's 
	still something else to learn. Google Maps is also now a pay as you go service, meaning it would be relatively cheap for us to implement.
	Likely if we can't figure out how to create a truly interactive map we'd have to create a false map of Atlanta and then hard code latitude
	and longitude coordinates.